/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "keymap_italian.h"
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer definitions

#define BASE 0
#define NUM 1
#define EXT 2
#define FNC 3
#define SYM2 4
#define ACCENT 5
#define SETTINGS 6

// -----------------
// Convenience Methods

#define MOD_MORPH(NAME, KEY, MOD_KEY) \
  mm_##NAME: mm_##NAME { \
    compatible = "zmk,behavior-mod-morph"; \
    label = #NAME; \
    #binding-cells = <0>; \
    bindings = <&kp KEY>, <&kp MOD_KEY>; \
    mods = <(MOD_LSFT|MOD_RSFT)>; \
  };

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

&sk {
    ignore-modifiers;
};

/ {
    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.

        unstick: unstick {
            label = "ZM_unstick";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // both right thumb keys
        // internal-left & external-right thumb keys
        // both left thumb keys

        toggle_3 {
            bindings = <&to 3>;
            key-positions = <32 31>;
            timeout-ms = <200>;
        };

        del {
            bindings = <&mt LEFT_ALT BACKSPACE>;
            key-positions = <27 28>;
        };

        ctrl {
            bindings = <&sk LCTRL>;
            key-positions = <21 22>;
        };

        cmd {
            bindings = <&sk LCMD>;
            key-positions = <30 31>;
        };

        alt {
            bindings = <&sk LEFT_ALT>;
            key-positions = <32 33>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <14 15>;
        };

        return {
            bindings = <&kp RET>;
            key-positions = <33 30>;
        };
    };

    behaviors {
        htp: ht_tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        comma_period: comma_period {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_PERIOD";
            #binding-cells = <0>;
            bindings =
                <&kp COMMA>,
                <&kp PERIOD>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        MOD_MORPH(excl_question,

        EXCL,

        QUESTION)

        MOD_MORPH(

        brackets,
        LEFT_BRACKET,

        RIGHT_BRACKET)
        MOD_MORPH(

        braces,
        LEFT_BRACE,

        RIGHT_BRACE)
        MOD_MORPH(

        lt_gt,
        LESS_THAN,

        GREATER_THAN)
        MOD_MORPH(

        parens,
        LEFT_PARENTHESIS,

        RIGHT_PARENTHESIS)
        MOD_MORPH(

        slashes,
        SLASH,

        BACKSLASH)
        MOD_MORPH(

        minus_plus,

        MINUS, PLUS)
        MOD_MORPH(

        comma_period,
        COMMA,

        PERIOD)

        MOD_MORPH(

        equals_pipe,
        EQUALS,

        PIPE)
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        default_layer {
            bindings = <
  &kp Y   &kp C   &kp L      &kp M   &kp K   &kp Z           &kp F           &kp U   &mm_comma_period  &gresc
  &kp I   &kp S   &kp R      &kp T   &kp G   &kp P           &kp N           &kp E              &kp A   &kp O
  &kp Q   &kp V   &kp W      &kp D   &kp J   &kp B           &kp H  &kp APOSTROPHE  &mm_excl_question   &kp X
                         &kp SPACE   &to 2   &to 1  &kp LEFT_SHIFT
            >;
        };

        // Numbers and high frequency symbols

        num_layer {
            bindings = <
  &none  &kp NUMBER_6  &kp NUMBER_5  &kp NUMBER_4        &none       &none              &none   &none  &none  &none
  &none  &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1        &none       &none     &kp UNDERSCORE   &none  &none  &none
  &none  &kp NUMBER_9        &kp N8  &kp NUMBER_7        &none       &none              &none   &none  &none  &none
                                            &none        &to 0       &to 4              &none
            >;
        };

        // Main modifiers and arrow keys

        ext_layer {
            bindings = <
   &kp ESC     &trans      &trans     &trans     &trans     &kp PG_UP  &kp HOME    &kp UP    &kp END  &kp CAPS
  &sk LALT   &sk LGUI  &sk LSHIFT  &sk LCTRL   &kp RALT     &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT   &kp DEL
 &kp LC(Z)  &kp LC(X)   &kp LC(C)    &kp TAB  &kp LC(V)  &kp LC(BSPC)  &kp BSPC    &trans     &trans    &trans
                                       &none      &to 0         &to 5     &none
            >;
        };

        // Function keys with modifiers

        fnc_layer {
            bindings = <
      &kp F1    &kp F2      &kp F3     &kp F4    &kp F5   &kp F6   &kp F7           &kp F8  &kp F9      &kp F10
    &sk LALT  &sk LGUI  &sk LSHIFT  &sk LCTRL  &kp RALT  &kp F11  &kp F12  &kp PRINTSCREEN  &trans       &trans
 &bootloader     &none       &none      &none     &none    &none    &none            &none   &none  &bootloader
                                        &none     &to 0    &to 6    &none
            >;
        };

        // Low frequency symbols.

        symbols_2_layer {
            bindings = <
 &kp IT_CARET  &kp IT_UNDER   &kp IT_PND   &kp IT_EUR  &kp IT_HASH   &none   &none   &none   &none   &none
  &kp IT_BKTK  &kp IT_TILDE  &kp IT_BSLH  &kp IT_PIPE   &kp IT_AND   &none   &none   &none   &none   &none
        &none         &none  &kp IT_SECT  &kp IT_CCED   &kp IT_DEG   &none   &none   &none   &none   &none
                                                &none        &to 0   &none   &none
            >;
        };

        // Used to type regional accents.

        accent_layer {
            bindings = <
       &none        &none        &none  &kp IT_CEGR        &none   &none   &none   &none   &none   &none
 &kp IT_AGRV  &kp IT_IGRV  &kp IT_OGRV  &kp IT_EGRV  &kp IT_EACU   &none   &none   &none   &none   &none
       &none        &none        &none  &kp IT_UGRV        &none   &none   &none   &none   &none   &none
                                              &none        &to 0   &none   &none
            >;
        };

        // Used to change the keyboard's settings.

        settings_layer {
            bindings = <
 &bootloader   &none   &none  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 3   &none  &unstick   &none  &bootloader
       &none   &none   &none       &none  &bt BT_SEL 1  &bt BT_SEL 4   &none     &none   &none        &none
       &none   &none   &none       &none  &bt BT_SEL 2  &bt BT_SEL 5   &none     &none   &none        &none
                                   &none         &to 0         &none   &none
            >;
        };
    };
};
